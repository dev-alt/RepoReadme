#!/usr/bin/env python3
\"\"\"\nEnhanced LinkedIn Bio Configuration Dialog\n\nProvides comprehensive configuration for LinkedIn bio generation including:\n- Experience level selection\n- Comprehensive technology tracking\n- Style preferences\n- Optimization settings\n\"\"\"\n\nimport tkinter as tk\nfrom tkinter import ttk, messagebox\nfrom typing import Dict, List, Optional\nimport json\n\ntry:\n    from .ai_linkedin_bio_generator import AIBioConfig\nexcept ImportError:\n    from ai_linkedin_bio_generator import AIBioConfig\n\n\nclass EnhancedBioConfigDialog:\n    \"\"\"Enhanced configuration dialog for LinkedIn bio generation.\"\"\"\n    \n    def __init__(self, parent, initial_config: AIBioConfig = None):\n        self.parent = parent\n        self.config = initial_config or AIBioConfig()\n        self.result = None\n        \n        # Create dialog window\n        self.dialog = tk.Toplevel(parent)\n        self.dialog.title(\"Enhanced LinkedIn Bio Configuration\")\n        self.dialog.geometry(\"800x700\")\n        self.dialog.transient(parent)\n        self.dialog.grab_set()\n        \n        # Center the dialog\n        self.dialog.update_idletasks()\n        x = (self.dialog.winfo_screenwidth() // 2) - (800 // 2)\n        y = (self.dialog.winfo_screenheight() // 2) - (700 // 2)\n        self.dialog.geometry(f\"800x700+{x}+{y}\")\n        \n        self.setup_ui()\n        self.load_config()\n        \n    def setup_ui(self):\n        \"\"\"Setup the user interface.\"\"\"\n        \n        # Create notebook for tabs\n        notebook = ttk.Notebook(self.dialog)\n        notebook.pack(fill=\"both\", expand=True, padx=10, pady=5)\n        \n        # Basic Configuration Tab\n        self.basic_frame = ttk.Frame(notebook)\n        notebook.add(self.basic_frame, text=\"Basic Configuration\")\n        self.setup_basic_tab()\n        \n        # Experience Level Tab\n        self.experience_frame = ttk.Frame(notebook)\n        notebook.add(self.experience_frame, text=\"Experience Level\")\n        self.setup_experience_tab()\n        \n        # Technology Stack Tab\n        self.tech_frame = ttk.Frame(notebook)\n        notebook.add(self.tech_frame, text=\"Technology Stack\")\n        self.setup_technology_tab()\n        \n        # Style & Optimization Tab\n        self.style_frame = ttk.Frame(notebook)\n        notebook.add(self.style_frame, text=\"Style & Optimization\")\n        self.setup_style_tab()\n        \n        # Buttons frame\n        button_frame = ttk.Frame(self.dialog)\n        button_frame.pack(fill=\"x\", padx=10, pady=5)\n        \n        ttk.Button(button_frame, text=\"Save Configuration\", command=self.save_config).pack(side=\"left\", padx=5)\n        ttk.Button(button_frame, text=\"Load Configuration\", command=self.load_config_file).pack(side=\"left\", padx=5)\n        ttk.Button(button_frame, text=\"Generate Bio\", command=self.accept).pack(side=\"right\", padx=5)\n        ttk.Button(button_frame, text=\"Cancel\", command=self.cancel).pack(side=\"right\", padx=5)\n    \n    def setup_basic_tab(self):\n        \"\"\"Setup basic configuration tab.\"\"\"\n        \n        # Bio Style\n        ttk.Label(self.basic_frame, text=\"Bio Style:\", font=(\"Arial\", 10, \"bold\")).grid(row=0, column=0, sticky=\"w\", padx=5, pady=5)\n        self.bio_style = ttk.Combobox(self.basic_frame, values=[\"professional\", \"creative\", \"technical\", \"executive\", \"startup\"], width=30)\n        self.bio_style.grid(row=0, column=1, sticky=\"w\", padx=5, pady=5)\n        \n        # Target Role\n        ttk.Label(self.basic_frame, text=\"Target Role:\").grid(row=1, column=0, sticky=\"w\", padx=5, pady=5)\n        self.target_role = ttk.Entry(self.basic_frame, width=35)\n        self.target_role.grid(row=1, column=1, sticky=\"w\", padx=5, pady=5)\n        \n        # Target Industry\n        ttk.Label(self.basic_frame, text=\"Target Industry:\").grid(row=2, column=0, sticky=\"w\", padx=5, pady=5)\n        self.target_industry = ttk.Combobox(self.basic_frame, values=[\"technology\", \"fintech\", \"healthcare\", \"ecommerce\", \"gaming\", \"ai_ml\"], width=30)\n        self.target_industry.grid(row=2, column=1, sticky=\"w\", padx=5, pady=5)\n        \n        # Bio Length\n        ttk.Label(self.basic_frame, text=\"Bio Length:\").grid(row=3, column=0, sticky=\"w\", padx=5, pady=5)\n        self.bio_length = ttk.Combobox(self.basic_frame, values=[\"short\", \"medium\", \"long\"], width=30)\n        self.bio_length.grid(row=3, column=1, sticky=\"w\", padx=5, pady=5)\n        \n        # Tone\n        ttk.Label(self.basic_frame, text=\"Tone:\").grid(row=4, column=0, sticky=\"w\", padx=5, pady=5)\n        self.tone = ttk.Combobox(self.basic_frame, values=[\"confident\", \"humble\", \"enthusiastic\", \"analytical\", \"visionary\"], width=30)\n        self.tone.grid(row=4, column=1, sticky=\"w\", padx=5, pady=5)\n    \n    def setup_experience_tab(self):\n        \"\"\"Setup experience level configuration tab.\"\"\"\n        \n        # Experience Level\n        ttk.Label(self.experience_frame, text=\"Experience Level:\", font=(\"Arial\", 10, \"bold\")).grid(row=0, column=0, sticky=\"w\", padx=5, pady=5)\n        self.experience_level = ttk.Combobox(self.experience_frame, values=[\n            \"recent_graduate\", \"junior\", \"mid_level\", \"senior\", \"lead\", \"executive\"\n        ], width=30)\n        self.experience_level.grid(row=0, column=1, sticky=\"w\", padx=5, pady=5)\n        self.experience_level.bind(\"<<ComboboxSelected>>\", self.on_experience_change)\n        \n        # Years of Experience\n        ttk.Label(self.experience_frame, text=\"Years of Experience:\").grid(row=1, column=0, sticky=\"w\", padx=5, pady=5)\n        self.years_experience = ttk.Spinbox(self.experience_frame, from_=0, to=30, width=10)\n        self.years_experience.grid(row=1, column=1, sticky=\"w\", padx=5, pady=5)\n        \n        # Career Stage\n        ttk.Label(self.experience_frame, text=\"Career Stage:\").grid(row=2, column=0, sticky=\"w\", padx=5, pady=5)\n        self.career_stage = ttk.Combobox(self.experience_frame, values=[\n            \"entry_level\", \"early_career\", \"mid_career\", \"senior_career\", \"executive\"\n        ], width=30)\n        self.career_stage.grid(row=2, column=1, sticky=\"w\", padx=5, pady=5)\n        \n        # Experience Level Guide\n        guide_frame = ttk.LabelFrame(self.experience_frame, text=\"Experience Level Guide\")\n        guide_frame.grid(row=3, column=0, columnspan=2, sticky=\"ew\", padx=5, pady=10)\n        \n        guide_text = \"\"\"\nRecent Graduate: 0-1 years, just finished studies, focus on projects and potential\nJunior: 1-3 years, growing skills, focus on learning and contributions\nMid-Level: 3-7 years, established skills, focus on impact and leadership\nSenior: 7-12 years, expert-level skills, focus on architecture and mentoring\nLead: 10+ years, team leadership, focus on strategy and technical direction\nExecutive: 15+ years, organizational leadership, focus on vision and transformation\n\"\"\"\n        \n        ttk.Label(guide_frame, text=guide_text, font=(\"Arial\", 9), justify=\"left\").pack(padx=10, pady=5)\n    \n    def setup_technology_tab(self):\n        \"\"\"Setup technology stack configuration tab.\"\"\"\n        \n        # Create scrollable frame\n        canvas = tk.Canvas(self.tech_frame)\n        scrollbar = ttk.Scrollbar(self.tech_frame, orient=\"vertical\", command=canvas.yview)\n        scrollable_frame = ttk.Frame(canvas)\n        \n        scrollable_frame.bind(\n            \"<Configure>\",\n            lambda e: canvas.configure(scrollregion=canvas.bbox(\"all\"))\n        )\n        \n        canvas.create_window((0, 0), window=scrollable_frame, anchor=\"nw\")\n        canvas.configure(yscrollcommand=scrollbar.set)\n        \n        # Programming Languages\n        ttk.Label(scrollable_frame, text=\"Programming Languages:\", font=(\"Arial\", 10, \"bold\")).grid(row=0, column=0, sticky=\"w\", padx=5, pady=5)\n        self.programming_languages = tk.Text(scrollable_frame, height=3, width=60)\n        self.programming_languages.grid(row=0, column=1, sticky=\"w\", padx=5, pady=5)\n        ttk.Label(scrollable_frame, text=\"(e.g., Python, JavaScript, TypeScript, C#, Go, Java)\", font=(\"Arial\", 8)).grid(row=0, column=2, sticky=\"w\", padx=5)\n        \n        # Frameworks & Libraries\n        ttk.Label(scrollable_frame, text=\"Frameworks & Libraries:\", font=(\"Arial\", 10, \"bold\")).grid(row=1, column=0, sticky=\"w\", padx=5, pady=5)\n        self.frameworks_libraries = tk.Text(scrollable_frame, height=3, width=60)\n        self.frameworks_libraries.grid(row=1, column=1, sticky=\"w\", padx=5, pady=5)\n        ttk.Label(scrollable_frame, text=\"(e.g., React, NextJS, Avalonia, Django, Flask, Angular)\", font=(\"Arial\", 8)).grid(row=1, column=2, sticky=\"w\", padx=5)\n        \n        # Tools & Platforms\n        ttk.Label(scrollable_frame, text=\"Tools & Platforms:\", font=(\"Arial\", 10, \"bold\")).grid(row=2, column=0, sticky=\"w\", padx=5, pady=5)\n        self.tools_platforms = tk.Text(scrollable_frame, height=3, width=60)\n        self.tools_platforms.grid(row=2, column=1, sticky=\"w\", padx=5, pady=5)\n        ttk.Label(scrollable_frame, text=\"(e.g., Docker, AWS, Git, VS Code, Jenkins, Kubernetes)\", font=(\"Arial\", 8)).grid(row=2, column=2, sticky=\"w\", padx=5)\n        \n        # Databases\n        ttk.Label(scrollable_frame, text=\"Databases:\", font=(\"Arial\", 10, \"bold\")).grid(row=3, column=0, sticky=\"w\", padx=5, pady=5)\n        self.databases = tk.Text(scrollable_frame, height=2, width=60)\n        self.databases.grid(row=3, column=1, sticky=\"w\", padx=5, pady=5)\n        ttk.Label(scrollable_frame, text=\"(e.g., PostgreSQL, MongoDB, Redis, MySQL)\", font=(\"Arial\", 8)).grid(row=3, column=2, sticky=\"w\", padx=5)\n        \n        # Specializations\n        ttk.Label(scrollable_frame, text=\"Specializations:\", font=(\"Arial\", 10, \"bold\")).grid(row=4, column=0, sticky=\"w\", padx=5, pady=5)\n        self.specializations = tk.Text(scrollable_frame, height=2, width=60)\n        self.specializations.grid(row=4, column=1, sticky=\"w\", padx=5, pady=5)\n        ttk.Label(scrollable_frame, text=\"(e.g., Web Development, Mobile Apps, AI/ML, DevOps)\", font=(\"Arial\", 8)).grid(row=4, column=2, sticky=\"w\", padx=5)\n        \n        # Common Technologies Buttons\n        common_frame = ttk.LabelFrame(scrollable_frame, text=\"Quick Add Common Technologies\")\n        common_frame.grid(row=5, column=0, columnspan=3, sticky=\"ew\", padx=5, pady=10)\n        \n        # Frontend\n        ttk.Button(common_frame, text=\"Add Frontend Stack\", \n                  command=lambda: self.add_common_tech(\"frontend\")).grid(row=0, column=0, padx=5, pady=2)\n        \n        # Backend\n        ttk.Button(common_frame, text=\"Add Backend Stack\", \n                  command=lambda: self.add_common_tech(\"backend\")).grid(row=0, column=1, padx=5, pady=2)\n        \n        # Full Stack\n        ttk.Button(common_frame, text=\"Add Full-Stack\", \n                  command=lambda: self.add_common_tech(\"fullstack\")).grid(row=0, column=2, padx=5, pady=2)\n        \n        # Mobile\n        ttk.Button(common_frame, text=\"Add Mobile Stack\", \n                  command=lambda: self.add_common_tech(\"mobile\")).grid(row=1, column=0, padx=5, pady=2)\n        \n        # AI/ML\n        ttk.Button(common_frame, text=\"Add AI/ML Stack\", \n                  command=lambda: self.add_common_tech(\"aiml\")).grid(row=1, column=1, padx=5, pady=2)\n        \n        # DevOps\n        ttk.Button(common_frame, text=\"Add DevOps Stack\", \n                  command=lambda: self.add_common_tech(\"devops\")).grid(row=1, column=2, padx=5, pady=2)\n        \n        canvas.pack(side=\"left\", fill=\"both\", expand=True)\n        scrollbar.pack(side=\"right\", fill=\"y\")\n    \n    def setup_style_tab(self):\n        \"\"\"Setup style and optimization tab.\"\"\"\n        \n        # Preferences\n        prefs_frame = ttk.LabelFrame(self.style_frame, text=\"Bio Preferences\")\n        prefs_frame.pack(fill=\"x\", padx=5, pady=5)\n        \n        self.use_metrics = tk.BooleanVar(value=True)\n        ttk.Checkbutton(prefs_frame, text=\"Include metrics and numbers\", variable=self.use_metrics).pack(anchor=\"w\", padx=5, pady=2)\n        \n        self.include_passion = tk.BooleanVar(value=True)\n        ttk.Checkbutton(prefs_frame, text=\"Include passion statement\", variable=self.include_passion).pack(anchor=\"w\", padx=5, pady=2)\n        \n        self.include_cta = tk.BooleanVar(value=True)\n        ttk.Checkbutton(prefs_frame, text=\"Include call to action\", variable=self.include_cta).pack(anchor=\"w\", padx=5, pady=2)\n        \n        self.emphasize_collaboration = tk.BooleanVar(value=True)\n        ttk.Checkbutton(prefs_frame, text=\"Emphasize collaboration\", variable=self.emphasize_collaboration).pack(anchor=\"w\", padx=5, pady=2)\n        \n        self.highlight_innovation = tk.BooleanVar(value=True)\n        ttk.Checkbutton(prefs_frame, text=\"Highlight innovation\", variable=self.highlight_innovation).pack(anchor=\"w\", padx=5, pady=2)\n        \n        self.show_learning_mindset = tk.BooleanVar(value=True)\n        ttk.Checkbutton(prefs_frame, text=\"Show learning mindset (important for recent graduates)\", variable=self.show_learning_mindset).pack(anchor=\"w\", padx=5, pady=2)\n        \n        # Personal Brand\n        brand_frame = ttk.LabelFrame(self.style_frame, text=\"Personal Brand\")\n        brand_frame.pack(fill=\"x\", padx=5, pady=5)\n        \n        ttk.Label(brand_frame, text=\"Brand Adjectives (comma-separated):\").pack(anchor=\"w\", padx=5, pady=2)\n        self.personal_brand = ttk.Entry(brand_frame, width=60)\n        self.personal_brand.pack(fill=\"x\", padx=5, pady=2)\n        \n        ttk.Label(brand_frame, text=\"Value Proposition:\").pack(anchor=\"w\", padx=5, pady=2)\n        self.value_proposition = tk.Text(brand_frame, height=3, width=60)\n        self.value_proposition.pack(fill=\"x\", padx=5, pady=2)\n        \n        # Keywords\n        keyword_frame = ttk.LabelFrame(self.style_frame, text=\"SEO Keywords\")\n        keyword_frame.pack(fill=\"x\", padx=5, pady=5)\n        \n        ttk.Label(keyword_frame, text=\"Primary Keywords (comma-separated):\").pack(anchor=\"w\", padx=5, pady=2)\n        self.primary_keywords = ttk.Entry(keyword_frame, width=60)\n        self.primary_keywords.pack(fill=\"x\", padx=5, pady=2)\n        \n        ttk.Label(keyword_frame, text=\"Industry Keywords (comma-separated):\").pack(anchor=\"w\", padx=5, pady=2)\n        self.industry_keywords = ttk.Entry(keyword_frame, width=60)\n        self.industry_keywords.pack(fill=\"x\", padx=5, pady=2)\n    \n    def on_experience_change(self, event=None):\n        \"\"\"Handle experience level change.\"\"\"\n        level = self.experience_level.get()\n        \n        # Update years experience based on level\n        if level == \"recent_graduate\":\n            self.years_experience.set(\"0\")\n            self.career_stage.set(\"entry_level\")\n        elif level == \"junior\":\n            self.years_experience.set(\"2\")\n            self.career_stage.set(\"early_career\")\n        elif level == \"mid_level\":\n            self.years_experience.set(\"5\")\n            self.career_stage.set(\"mid_career\")\n        elif level == \"senior\":\n            self.years_experience.set(\"8\")\n            self.career_stage.set(\"senior_career\")\n        elif level == \"lead\":\n            self.years_experience.set(\"12\")\n            self.career_stage.set(\"senior_career\")\n        elif level == \"executive\":\n            self.years_experience.set(\"15\")\n            self.career_stage.set(\"executive\")\n    \n    def add_common_tech(self, stack_type: str):\n        \"\"\"Add common technology stacks.\"\"\"\n        stacks = {\n            \"frontend\": {\n                \"languages\": [\"JavaScript\", \"TypeScript\", \"HTML\", \"CSS\"],\n                \"frameworks\": [\"React\", \"NextJS\", \"Vue\", \"Angular\"],\n                \"tools\": [\"Webpack\", \"Vite\", \"npm\", \"Yarn\"]\n            },\n            \"backend\": {\n                \"languages\": [\"Python\", \"Node.js\", \"Java\", \"C#\"],\n                \"frameworks\": [\"Django\", \"Flask\", \"Express\", \"Spring Boot\", \"ASP.NET\"],\n                \"tools\": [\"Docker\", \"PostgreSQL\", \"Redis\"]\n            },\n            \"fullstack\": {\n                \"languages\": [\"JavaScript\", \"TypeScript\", \"Python\"],\n                \"frameworks\": [\"React\", \"NextJS\", \"Django\", \"Express\"],\n                \"tools\": [\"Docker\", \"Git\", \"AWS\"]\n            },\n            \"mobile\": {\n                \"languages\": [\"Swift\", \"Kotlin\", \"Dart\", \"JavaScript\"],\n                \"frameworks\": [\"React Native\", \"Flutter\", \"Xamarin\"],\n                \"tools\": [\"Xcode\", \"Android Studio\"]\n            },\n            \"aiml\": {\n                \"languages\": [\"Python\", \"R\", \"Julia\"],\n                \"frameworks\": [\"TensorFlow\", \"PyTorch\", \"scikit-learn\", \"Pandas\"],\n                \"tools\": [\"Jupyter\", \"Docker\", \"MLflow\"]\n            },\n            \"devops\": {\n                \"languages\": [\"Python\", \"Bash\", \"YAML\"],\n                \"frameworks\": [\"Terraform\", \"Ansible\", \"Helm\"],\n                \"tools\": [\"Docker\", \"Kubernetes\", \"Jenkins\", \"AWS\", \"Azure\"]\n            }\n        }\n        \n        if stack_type in stacks:\n            stack = stacks[stack_type]\n            \n            # Add languages\n            if \"languages\" in stack:\n                current = self.programming_languages.get(\"1.0\", tk.END).strip()\n                if current:\n                    current += \", \"\n                current += \", \".join(stack[\"languages\"])\n                self.programming_languages.delete(\"1.0\", tk.END)\n                self.programming_languages.insert(\"1.0\", current)\n            \n            # Add frameworks\n            if \"frameworks\" in stack:\n                current = self.frameworks_libraries.get(\"1.0\", tk.END).strip()\n                if current:\n                    current += \", \"\n                current += \", \".join(stack[\"frameworks\"])\n                self.frameworks_libraries.delete(\"1.0\", tk.END)\n                self.frameworks_libraries.insert(\"1.0\", current)\n            \n            # Add tools\n            if \"tools\" in stack:\n                current = self.tools_platforms.get(\"1.0\", tk.END).strip()\n                if current:\n                    current += \", \"\n                current += \", \".join(stack[\"tools\"])\n                self.tools_platforms.delete(\"1.0\", tk.END)\n                self.tools_platforms.insert(\"1.0\", current)\n    \n    def load_config(self):\n        \"\"\"Load configuration into the UI.\"\"\"\n        # Basic\n        self.bio_style.set(self.config.bio_style)\n        self.target_role.insert(0, self.config.target_role)\n        self.target_industry.set(self.config.target_industry)\n        self.bio_length.set(self.config.length)\n        self.tone.set(self.config.tone)\n        \n        # Experience\n        self.experience_level.set(self.config.experience_level)\n        self.years_experience.set(str(self.config.years_experience))\n        self.career_stage.set(self.config.career_stage)\n        \n        # Technology\n        if self.config.programming_languages:\n            self.programming_languages.insert(\"1.0\", \", \".join(self.config.programming_languages))\n        if self.config.frameworks_libraries:\n            self.frameworks_libraries.insert(\"1.0\", \", \".join(self.config.frameworks_libraries))\n        if self.config.tools_platforms:\n            self.tools_platforms.insert(\"1.0\", \", \".join(self.config.tools_platforms))\n        if self.config.databases:\n            self.databases.insert(\"1.0\", \", \".join(self.config.databases))\n        if self.config.specializations:\n            self.specializations.insert(\"1.0\", \", \".join(self.config.specializations))\n        \n        # Style\n        self.use_metrics.set(self.config.use_metrics)\n        self.include_passion.set(self.config.include_passion_statement)\n        self.include_cta.set(self.config.include_call_to_action)\n        self.emphasize_collaboration.set(self.config.emphasize_collaboration)\n        self.highlight_innovation.set(self.config.highlight_innovation)\n        self.show_learning_mindset.set(self.config.show_learning_mindset)\n        \n        if self.config.personal_brand_adjectives:\n            self.personal_brand.insert(0, \", \".join(self.config.personal_brand_adjectives))\n        self.value_proposition.insert(\"1.0\", self.config.value_proposition)\n        \n        if self.config.primary_keywords:\n            self.primary_keywords.insert(0, \", \".join(self.config.primary_keywords))\n        if self.config.industry_keywords:\n            self.industry_keywords.insert(0, \", \".join(self.config.industry_keywords))\n    \n    def get_config(self) -> AIBioConfig:\n        \"\"\"Get configuration from UI.\"\"\"\n        config = AIBioConfig()\n        \n        # Basic\n        config.bio_style = self.bio_style.get()\n        config.target_role = self.target_role.get()\n        config.target_industry = self.target_industry.get()\n        config.length = self.bio_length.get()\n        config.tone = self.tone.get()\n        \n        # Experience\n        config.experience_level = self.experience_level.get()\n        config.years_experience = int(self.years_experience.get() or 0)\n        config.career_stage = self.career_stage.get()\n        \n        # Technology\n        config.programming_languages = [lang.strip() for lang in self.programming_languages.get(\"1.0\", tk.END).strip().split(\",\") if lang.strip()]\n        config.frameworks_libraries = [fw.strip() for fw in self.frameworks_libraries.get(\"1.0\", tk.END).strip().split(\",\") if fw.strip()]\n        config.tools_platforms = [tool.strip() for tool in self.tools_platforms.get(\"1.0\", tk.END).strip().split(\",\") if tool.strip()]\n        config.databases = [db.strip() for db in self.databases.get(\"1.0\", tk.END).strip().split(\",\") if db.strip()]\n        config.specializations = [spec.strip() for spec in self.specializations.get(\"1.0\", tk.END).strip().split(\",\") if spec.strip()]\n        \n        # Style\n        config.use_metrics = self.use_metrics.get()\n        config.include_passion_statement = self.include_passion.get()\n        config.include_call_to_action = self.include_cta.get()\n        config.emphasize_collaboration = self.emphasize_collaboration.get()\n        config.highlight_innovation = self.highlight_innovation.get()\n        config.show_learning_mindset = self.show_learning_mindset.get()\n        \n        config.personal_brand_adjectives = [adj.strip() for adj in self.personal_brand.get().split(\",\") if adj.strip()]\n        config.value_proposition = self.value_proposition.get(\"1.0\", tk.END).strip()\n        config.primary_keywords = [kw.strip() for kw in self.primary_keywords.get().split(\",\") if kw.strip()]\n        config.industry_keywords = [kw.strip() for kw in self.industry_keywords.get().split(\",\") if kw.strip()]\n        \n        return config\n    \n    def save_config(self):\n        \"\"\"Save configuration to file.\"\"\"\n        try:\n            from tkinter import filedialog\n            filename = filedialog.asksaveasfilename(\n                defaultextension=\".json\",\n                filetypes=[(\"JSON files\", \"*.json\"), (\"All files\", \"*.*\")],\n                title=\"Save Bio Configuration\"\n            )\n            \n            if filename:\n                config = self.get_config()\n                config_dict = {\n                    \"bio_style\": config.bio_style,\n                    \"target_role\": config.target_role,\n                    \"target_industry\": config.target_industry,\n                    \"length\": config.length,\n                    \"tone\": config.tone,\n                    \"experience_level\": config.experience_level,\n                    \"years_experience\": config.years_experience,\n                    \"career_stage\": config.career_stage,\n                    \"programming_languages\": config.programming_languages,\n                    \"frameworks_libraries\": config.frameworks_libraries,\n                    \"tools_platforms\": config.tools_platforms,\n                    \"databases\": config.databases,\n                    \"specializations\": config.specializations,\n                    \"use_metrics\": config.use_metrics,\n                    \"include_passion_statement\": config.include_passion_statement,\n                    \"include_call_to_action\": config.include_call_to_action,\n                    \"emphasize_collaboration\": config.emphasize_collaboration,\n                    \"highlight_innovation\": config.highlight_innovation,\n                    \"show_learning_mindset\": config.show_learning_mindset,\n                    \"personal_brand_adjectives\": config.personal_brand_adjectives,\n                    \"value_proposition\": config.value_proposition,\n                    \"primary_keywords\": config.primary_keywords,\n                    \"industry_keywords\": config.industry_keywords\n                }\n                \n                with open(filename, 'w') as f:\n                    json.dump(config_dict, f, indent=2)\n                \n                messagebox.showinfo(\"Success\", \"Configuration saved successfully!\")\n        \n        except Exception as e:\n            messagebox.showerror(\"Error\", f\"Failed to save configuration: {str(e)}\")\n    \n    def load_config_file(self):\n        \"\"\"Load configuration from file.\"\"\"\n        try:\n            from tkinter import filedialog\n            filename = filedialog.askopenfilename(\n                filetypes=[(\"JSON files\", \"*.json\"), (\"All files\", \"*.*\")],\n                title=\"Load Bio Configuration\"\n            )\n            \n            if filename:\n                with open(filename, 'r') as f:\n                    config_dict = json.load(f)\n                \n                # Clear current values\n                self.clear_all_fields()\n                \n                # Load new values\n                config = AIBioConfig()\n                for key, value in config_dict.items():\n                    if hasattr(config, key):\n                        setattr(config, key, value)\n                \n                self.config = config\n                self.load_config()\n                \n                messagebox.showinfo(\"Success\", \"Configuration loaded successfully!\")\n        \n        except Exception as e:\n            messagebox.showerror(\"Error\", f\"Failed to load configuration: {str(e)}\")\n    \n    def clear_all_fields(self):\n        \"\"\"Clear all form fields.\"\"\"\n        # Clear text entries\n        self.target_role.delete(0, tk.END)\n        self.personal_brand.delete(0, tk.END)\n        self.primary_keywords.delete(0, tk.END)\n        self.industry_keywords.delete(0, tk.END)\n        \n        # Clear text widgets\n        self.programming_languages.delete(\"1.0\", tk.END)\n        self.frameworks_libraries.delete(\"1.0\", tk.END)\n        self.tools_platforms.delete(\"1.0\", tk.END)\n        self.databases.delete(\"1.0\", tk.END)\n        self.specializations.delete(\"1.0\", tk.END)\n        self.value_proposition.delete(\"1.0\", tk.END)\n    \n    def accept(self):\n        \"\"\"Accept the configuration.\"\"\"\n        try:\n            self.result = self.get_config()\n            self.dialog.destroy()\n        except Exception as e:\n            messagebox.showerror(\"Error\", f\"Invalid configuration: {str(e)}\")\n    \n    def cancel(self):\n        \"\"\"Cancel the dialog.\"\"\"\n        self.result = None\n        self.dialog.destroy()\n    \n    def show(self) -> Optional[AIBioConfig]:\n        \"\"\"Show the dialog and return the result.\"\"\"\n        self.dialog.wait_window()\n        return self.result\n\n\ndef main():\n    \"\"\"Test the enhanced bio configuration dialog.\"\"\"\n    root = tk.Tk()\n    root.withdraw()  # Hide main window\n    \n    # Test with initial config\n    initial_config = AIBioConfig()\n    initial_config.experience_level = \"recent_graduate\"\n    initial_config.target_role = \"Software Engineer\"\n    initial_config.programming_languages = [\"Python\", \"JavaScript\"]\n    initial_config.frameworks_libraries = [\"React\", \"Django\"]\n    \n    dialog = EnhancedBioConfigDialog(root, initial_config)\n    result = dialog.show()\n    \n    if result:\n        print(\"Configuration result:\")\n        print(f\"Experience Level: {result.experience_level}\")\n        print(f\"Years: {result.years_experience}\")\n        print(f\"Languages: {result.programming_languages}\")\n        print(f\"Frameworks: {result.frameworks_libraries}\")\n    else:\n        print(\"Dialog cancelled\")\n    \n    root.destroy()\n\n\nif __name__ == \"__main__\":\n    main()\n