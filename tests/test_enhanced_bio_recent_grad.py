#!/usr/bin/env python3
\"\"\"\nTest script for enhanced LinkedIn bio generation with recent graduate focus\nand comprehensive technology tracking.\n\"\"\"\n\nimport sys\nimport os\nsys.path.append(os.path.join(os.path.dirname(__file__), 'src'))\n\nfrom src.ai_linkedin_bio_generator import AILinkedInBioGenerator, AIBioConfig\nfrom src.openrouter_service import OpenRouterAIService, EnhancementRequest\nfrom src.profile_builder import GitHubProfile\nfrom src.utils.logger import get_logger\n\ndef create_recent_graduate_config():\n    \"\"\"Create configuration for a recent graduate.\"\"\"\n    config = AIBioConfig()\n    \n    # Experience level settings\n    config.experience_level = \"recent_graduate\"\n    config.years_experience = 0\n    config.career_stage = \"entry_level\"\n    config.bio_style = \"professional\"\n    config.target_role = \"Software Engineer\"\n    config.target_industry = \"technology\"\n    \n    # Comprehensive technology stack\n    config.programming_languages = [\n        \"Python\", \"JavaScript\", \"TypeScript\", \"C#\", \"HTML\", \"CSS\"\n    ]\n    config.frameworks_libraries = [\n        \"React\", \"NextJS\", \"Avalonia\", \"Django\", \"Flask\", \"Express\", \"Node.js\"\n    ]\n    config.tools_platforms = [\n        \"Git\", \"GitHub\", \"VS Code\", \"Docker\", \"AWS\", \"Vercel\", \"Netlify\"\n    ]\n    config.databases = [\n        \"PostgreSQL\", \"MongoDB\", \"SQLite\", \"Redis\"\n    ]\n    config.specializations = [\n        \"Web Development\", \"Full-Stack Development\", \"Desktop Applications\", \"API Development\"\n    ]\n    \n    # Graduate-specific preferences\n    config.show_learning_mindset = True\n    config.emphasize_collaboration = True\n    config.use_metrics = True\n    config.include_passion_statement = True\n    config.personal_brand_adjectives = [\"eager\", \"collaborative\", \"innovative\", \"detail-oriented\"]\n    config.value_proposition = \"Fresh perspective with modern technical skills and enthusiasm for learning\"\n    \n    return config\n\ndef create_sample_github_profile():\n    \"\"\"Create a sample GitHub profile for a recent graduate.\"\"\"\n    profile = GitHubProfile()\n    \n    # Basic info\n    profile.username = \"dev-alt\"\n    profile.primary_languages = [\"Python\", \"JavaScript\", \"TypeScript\", \"C#\", \"HTML\", \"CSS\"]\n    profile.total_repositories = 12\n    profile.public_repositories = 10\n    profile.original_repositories = 8\n    profile.forked_repositories = 2\n    profile.total_stars_received = 25\n    profile.total_forks_received = 8\n    \n    # Featured projects (student projects)\n    profile.featured_projects = [\n        {\n            \"name\": \"Personal Portfolio Website\",\n            \"description\": \"React and NextJS portfolio showcasing projects with responsive design\",\n            \"stars\": 5,\n            \"language\": \"JavaScript\",\n            \"topics\": [\"react\", \"nextjs\", \"portfolio\", \"responsive\"]\n        },\n        {\n            \"name\": \"Task Management App\",\n            \"description\": \"Full-stack web application built with Django backend and React frontend\",\n            \"stars\": 8,\n            \"language\": \"Python\",\n            \"topics\": [\"django\", \"react\", \"postgresql\", \"rest-api\"]\n        },\n        {\n            \"name\": \"Desktop Expense Tracker\",\n            \"description\": \"Cross-platform desktop application using Avalonia UI and C#\",\n            \"stars\": 6,\n            \"language\": \"C#\",\n            \"topics\": [\"avalonia\", \"csharp\", \"desktop\", \"sqlite\"]\n        },\n        {\n            \"name\": \"Weather API Service\",\n            \"description\": \"RESTful API built with Express.js and MongoDB for weather data\",\n            \"stars\": 4,\n            \"language\": \"JavaScript\",\n            \"topics\": [\"nodejs\", \"express\", \"mongodb\", \"api\"]\n        },\n        {\n            \"name\": \"Study Group Finder\",\n            \"description\": \"University project connecting students for study groups using Flask\",\n            \"stars\": 2,\n            \"language\": \"Python\",\n            \"topics\": [\"flask\", \"sqlite\", \"university\", \"social\"]\n        }\n    ]\n    \n    return profile\n\ndef test_recent_graduate_bio_generation():\n    \"\"\"Test bio generation for recent graduates.\"\"\"\n    logger = get_logger()\n    logger.info(\"\ud83c\udf93 Testing Recent Graduate LinkedIn Bio Generation\")\n    \n    # Create configuration and profile\n    config = create_recent_graduate_config()\n    github_profile = create_sample_github_profile()\n    \n    logger.info(f\"Configuration: {config.experience_level}, {len(config.programming_languages)} languages\")\n    logger.info(f\"Technologies: {', '.join(config.programming_languages[:5])}...\")\n    \n    # Generate bio using AI LinkedIn Bio Generator\n    bio_generator = AILinkedInBioGenerator(config)\n    result = bio_generator.generate_ai_bio(github_profile, config)\n    \n    logger.info(\"\ud83d\udcdd Generated Bio (Primary):\")\n    logger.info(f\"{result.primary_bio}\")\n    \n    logger.info(f\"\\n\ud83d\udcca Analysis Results:\")\n    logger.info(f\"Readability Score: {result.readability_score}/100\")\n    logger.info(f\"Engagement Potential: {result.engagement_potential}\")\n    logger.info(f\"SEO Score: {result.search_optimization_score}/100\")\n    logger.info(f\"Uniqueness Score: {result.uniqueness_score}/100\")\n    \n    if result.alternative_versions:\n        logger.info(f\"\\n\u2728 Alternative Versions ({len(result.alternative_versions)}):\")\n        for i, alt in enumerate(result.alternative_versions, 1):\n            logger.info(f\"\\nAlternative {i}:\")\n            logger.info(f\"{alt[:200]}...\")  # First 200 chars\n    \n    return result\n\ndef test_openrouter_enhancement():\n    \"\"\"Test OpenRouter enhancement for recent graduates.\"\"\"\n    logger = get_logger()\n    logger.info(\"\ud83e\udd16 Testing OpenRouter Enhancement for Recent Graduates\")\n    \n    # Create enhancement request\n    request = EnhancementRequest(\n        original_bio=\"Recent Computer Science graduate with experience in Python, JavaScript, and web development. Built several projects including a task management app and portfolio website.\",\n        target_style=\"professional\",\n        target_role=\"Software Engineer\", \n        target_industry=\"technology\",\n        enhancement_type=\"improve\",\n        github_username=\"dev-alt\",\n        primary_languages=[\"Python\", \"JavaScript\", \"TypeScript\", \"C#\"],\n        project_highlights=[\"Personal Portfolio Website\", \"Task Management App\", \"Desktop Expense Tracker\"],\n        technical_achievements=[\"25 GitHub stars\", \"8 repositories\", \"Full-stack projects\"]\n    )\n    \n    # Test with OpenRouter service\n    openrouter_service = OpenRouterAIService()\n    \n    try:\n        # Get cost-optimized model recommendation\n        cost_analysis = openrouter_service.get_cost_vs_quality_analysis(request)\n        \n        if cost_analysis.get(\"most_economical\"):\n            economical = cost_analysis[\"most_economical\"]\n            logger.info(f\"\ud83d\udcb0 Most Economical Model: {economical['model_name']} (${economical['estimated_cost']:.4f})\")\n        \n        # Test enhancement (will likely use fallback due to SSL issues)\n        logger.info(\"\ud83d\ude80 Attempting bio enhancement...\")\n        result = openrouter_service.enhance_linkedin_bio(request)\n        \n        logger.info(f\"Model Used: {result.model_used}\")\n        logger.info(f\"Enhancement Score: {result.enhancement_score}/100\")\n        logger.info(f\"Cost: ${result.actual_cost:.6f}\")\n        \n        logger.info(\"\\n\ud83d\udcdd Enhanced Bio:\")\n        logger.info(result.enhanced_bio)\n        \n        if result.improvements_made:\n            logger.info(\"\\n\ud83d\udd27 Improvements Made:\")\n            for improvement in result.improvements_made:\n                logger.info(f\"  \u2022 {improvement}\")\n        \n        if result.suggestions:\n            logger.info(\"\\n\ud83d\udca1 Suggestions:\")\n            for suggestion in result.suggestions:\n                logger.info(f\"  \u2022 {suggestion}\")\n        \n        return result\n        \n    except Exception as e:\n        logger.error(f\"OpenRouter enhancement failed: {e}\")\n        return None\n\ndef test_technology_detection():\n    \"\"\"Test comprehensive technology detection.\"\"\"\n    logger = get_logger()\n    logger.info(\"\ud83d\udd0d Testing Technology Detection\")\n    \n    config = create_recent_graduate_config()\n    github_profile = create_sample_github_profile()\n    \n    bio_generator = AILinkedInBioGenerator(config)\n    \n    # Test technology stack analysis\n    tech_stack = bio_generator._analyze_comprehensive_tech_stack(github_profile, config)\n    \n    logger.info(\"Detected Technology Stack:\")\n    for category, technologies in tech_stack.items():\n        if technologies:\n            logger.info(f\"  {category.replace('_', ' ').title()}: {', '.join(technologies)}\")\n    \n    return tech_stack\n\ndef main():\n    \"\"\"Main test function.\"\"\"\n    logger = get_logger()\n    logger.info(\"\ud83c\udf86 Enhanced LinkedIn Bio Generation Test Suite\")\n    logger.info(\"=\"*60)\n    \n    tests = [\n        (\"Technology Detection\", test_technology_detection),\n        (\"Recent Graduate Bio Generation\", test_recent_graduate_bio_generation),\n        (\"OpenRouter Enhancement\", test_openrouter_enhancement)\n    ]\n    \n    results = []\n    \n    for test_name, test_func in tests:\n        logger.info(f\"\\n{'='*40}\")\n        logger.info(f\"Running: {test_name}\")\n        logger.info('='*40)\n        \n        try:\n            result = test_func()\n            results.append((test_name, \"PASSED\", result))\n            logger.info(f\"\u2705 {test_name} completed successfully\")\n        except Exception as e:\n            results.append((test_name, \"FAILED\", str(e)))\n            logger.error(f\"\u274c {test_name} failed: {e}\")\n    \n    # Summary\n    logger.info(f\"\\n{'='*60}\")\n    logger.info(\"TEST SUMMARY\")\n    logger.info('='*60)\n    \n    passed = sum(1 for _, status, _ in results if status == \"PASSED\")\n    total = len(results)\n    \n    for test_name, status, result in results:\n        status_icon = \"\u2705\" if status == \"PASSED\" else \"\u274c\"\n        logger.info(f\"{status_icon} {test_name}: {status}\")\n    \n    logger.info(f\"\\nOverall: {passed}/{total} tests passed\")\n    \n    if passed == total:\n        logger.info(\"\ud83c\udf89 All tests passed! Enhanced bio generation is working correctly.\")\n    else:\n        logger.info(\"\u26a0\ufe0f Some tests failed. Check the logs above for details.\")\n    \n    # Recommendations for recent graduates\n    logger.info(f\"\\n\ud83d\udca1 RECOMMENDATIONS FOR RECENT GRADUATES:\")\n    logger.info(\"1. Set experience_level to 'recent_graduate' for appropriate templates\")\n    logger.info(\"2. List ALL technologies you've used, including course projects\")\n    logger.info(\"3. Emphasize learning mindset and growth potential\")\n    logger.info(\"4. Include academic and personal projects as achievements\")\n    logger.info(\"5. Use 'eager', 'collaborative', 'innovative' as brand adjectives\")\n    logger.info(\"6. Focus on potential and passion rather than years of experience\")\n\nif __name__ == \"__main__\":\n    main()\n