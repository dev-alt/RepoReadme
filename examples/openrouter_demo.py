#!/usr/bin/env python3
"""
OpenRouter Integration Demo

Demonstrates how to configure and use OpenRouter API for enhanced AI-powered 
LinkedIn bio generation in the RepoReadme application.
"""

import sys
from pathlib import Path

# Add src directory to path
sys.path.insert(0, str(Path(__file__).parent.parent / 'src'))

try:
    from openrouter_service import OpenRouterAIService, OpenRouterConfig, EnhancementRequest
except ImportError:
    print("‚ùå Could not import OpenRouter service. Make sure you're running from the correct directory.")
    sys.exit(1)

def demo_openrouter_setup():
    """Demonstrate OpenRouter setup and configuration."""
    print("ü§ñ OpenRouter AI Integration Demo")
    print("=" * 60)
    print()
    
    print("üìã Setup Instructions:")
    print("1. Get your OpenRouter API key from: https://openrouter.ai/")
    print("2. Create an account and add credits to your balance")
    print("3. Copy your API key from the dashboard")
    print("4. In RepoReadme, navigate to 'ü§ñ AI Bio' tab")
    print("5. Enable 'OpenRouter AI Enhancement'")
    print("6. Paste your API key and click 'Save'")
    print("7. Test the connection with the 'Test' button")
    print()
    
    print("üîß Configuration Options:")
    print("‚Ä¢ Model: Choose from GPT-3.5, GPT-4, Claude, Llama, etc.")
    print("‚Ä¢ Temperature: Control creativity (0.0 = focused, 1.0 = creative)")
    print("‚Ä¢ Enhancement Options: Creativity, readability, keywords")
    print()

def demo_openrouter_workflow():
    """Demonstrate the OpenRouter enhancement workflow."""
    print("üöÄ OpenRouter Enhancement Workflow")
    print("=" * 60)
    print()
    
    print("Step 1: Generate Base Bio")
    print("   ‚Ä¢ Use the standard AI bio generator")
    print("   ‚Ä¢ Configure style, tone, and target role")
    print("   ‚Ä¢ Generate your initial bio version")
    print()
    
    print("Step 2: Configure OpenRouter")
    print("   ‚Ä¢ Enable OpenRouter AI Enhancement")
    print("   ‚Ä¢ Enter your API key and save")
    print("   ‚Ä¢ Select your preferred AI model")
    print("   ‚Ä¢ Test the connection")
    print()
    
    print("Step 3: Enhance with AI")
    print("   ‚Ä¢ Click '‚ú® Enhance with AI' button")
    print("   ‚Ä¢ AI analyzes and improves your bio")
    print("   ‚Ä¢ Get enhanced version + alternatives")
    print("   ‚Ä¢ Review improvement metrics")
    print()
    
    print("Step 4: Optimize and Export")
    print("   ‚Ä¢ Compare original vs enhanced versions")
    print("   ‚Ä¢ Choose your preferred bio")
    print("   ‚Ä¢ Export as text, guide, or copy to clipboard")
    print()

def demo_openrouter_models():
    """Demonstrate available OpenRouter models."""
    print("üß† Available AI Models (Updated)")
    print("=" * 60)
    print()
    
    models = [
        # Budget-Friendly Models
        ("meta-llama/llama-3-8b-instruct", "~$0.0002", "Open source, very cost-effective, fast"),
        ("deepseek/deepseek-v3.2-exp", "~$0.0003", "Advanced reasoning, excellent value, 163K context"),
        ("anthropic/claude-3-haiku", "~$0.0004", "Fast Claude model, great balance of speed/quality"),
        
        # Balanced Models  
        ("openai/gpt-3.5-turbo", "~$0.002", "Most popular, reliable, good for most use cases"),
        ("google/gemini-2.5-flash", "~$0.003", "Ultra-fast (0.4s), massive 1M context window"),
        ("anthropic/claude-3-sonnet", "~$0.004", "High-quality writing, excellent for creative bios"),
        
        # Premium Models
        ("openai/gpt-4-turbo", "~$0.012", "Latest GPT-4, 128K context, improved performance"),
        ("anthropic/claude-sonnet-4.5", "~$0.013", "üÜï Latest Claude, 1M context, top reasoning"),
        ("openai/gpt-4", "~$0.027", "Original GPT-4, highest quality for complex tasks"),
        ("anthropic/claude-3-opus", "~$0.045", "Most capable Claude, best for complex writing"),
    ]
    
    print("üí∞ MODELS BY COST (Bio Enhancement):")
    print()
    
    for model, cost, description in models:
        provider = model.split('/')[0].title()
        if provider == "Meta-llama":
            provider = "Meta"
        elif provider == "Anthropic":
            provider = "Anthropic"
        elif provider == "Openai":
            provider = "OpenAI"
        elif provider == "Google":
            provider = "Google"
        elif provider == "Deepseek":
            provider = "DeepSeek"
            
        print(f"ÔøΩ {cost:<8} | {provider:<10} | {model}")
        print(f"          {description}")
        print()
    
    print("üöÄ NEW ADDITIONS:")
    print("‚Ä¢ Claude Sonnet 4.5: Latest Anthropic model with 1M context")
    print("‚Ä¢ DeepSeek V3.2: Advanced reasoning at ultra-low cost")  
    print("‚Ä¢ Gemini 2.5 Flash: Google's fastest model (0.4s latency)")
    print()
    
    print("üí° Updated Recommendations:")
    print("‚Ä¢ Ultra Budget: Llama-3-8b ($0.0002 per bio)")
    print("‚Ä¢ Best Value: DeepSeek V3.2 ($0.0003 per bio)")
    print("‚Ä¢ Most Popular: GPT-3.5-turbo ($0.002 per bio)")
    print("‚Ä¢ Fastest: Gemini 2.5 Flash (0.4s response time)")
    print("‚Ä¢ Highest Quality: Claude Sonnet 4.5 ($0.013 per bio)")
    print("‚Ä¢ Creative Writing: Claude-3-sonnet ($0.004 per bio)")
    print()

def demo_enhancement_features():
    """Demonstrate enhancement features."""
    print("‚ú® Enhancement Features")
    print("=" * 60)
    print()
    
    print("üé® Creativity Enhancement:")
    print("   ‚Ä¢ Adds engaging personality")
    print("   ‚Ä¢ Improves storytelling flow")
    print("   ‚Ä¢ Makes bio more memorable")
    print()
    
    print("üìñ Readability Improvement:")
    print("   ‚Ä¢ Optimizes sentence structure")
    print("   ‚Ä¢ Improves clarity and flow")
    print("   ‚Ä¢ Ensures professional tone")
    print()
    
    print("üéØ Keyword Optimization:")
    print("   ‚Ä¢ Naturally integrates target keywords")
    print("   ‚Ä¢ Improves LinkedIn searchability")
    print("   ‚Ä¢ Maintains authentic voice")
    print()
    
    print("üìä Quality Metrics:")
    print("   ‚Ä¢ Enhancement score (0-100)")
    print("   ‚Ä¢ Readability improvement percentage")
    print("   ‚Ä¢ Engagement potential rating")
    print("   ‚Ä¢ Keyword optimization score")
    print()

def demo_cost_information():
    """Demonstrate cost information for OpenRouter."""
    print("üí∞ Updated Cost Information")
    print("=" * 60)
    print()
    
    print("OpenRouter Pricing (per bio enhancement):")
    print("‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê")
    print("‚îÇ Model                       ‚îÇ Cost     ‚îÇ Best For                ‚îÇ")
    print("‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§")
    print("‚îÇ Llama-3-8b                  ‚îÇ $0.0002  ‚îÇ Ultra budget            ‚îÇ")
    print("‚îÇ DeepSeek V3.2 üÜï            ‚îÇ $0.0003  ‚îÇ Best value + reasoning  ‚îÇ")
    print("‚îÇ Claude-3-haiku              ‚îÇ $0.0004  ‚îÇ Fast + quality          ‚îÇ")
    print("‚îÇ GPT-3.5-turbo               ‚îÇ $0.002   ‚îÇ Most reliable           ‚îÇ")
    print("‚îÇ Gemini 2.5 Flash üÜï         ‚îÇ $0.003   ‚îÇ Ultra-fast (0.4s)       ‚îÇ")
    print("‚îÇ Claude-3-sonnet             ‚îÇ $0.004   ‚îÇ Creative writing        ‚îÇ")
    print("‚îÇ GPT-4-turbo                 ‚îÇ $0.012   ‚îÇ Large context (128K)    ‚îÇ")
    print("‚îÇ Claude Sonnet 4.5 üÜï        ‚îÇ $0.013   ‚îÇ Latest + best reasoning ‚îÇ")
    print("‚îÇ GPT-4                       ‚îÇ $0.027   ‚îÇ Premium quality         ‚îÇ")
    print("‚îÇ Claude-3-opus               ‚îÇ $0.045   ‚îÇ Most capable            ‚îÇ")
    print("‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò")
    print()
    
    print("üí° Smart Cost Strategies:")
    print("‚Ä¢ Start testing: DeepSeek V3.2 ($0.0003)")
    print("‚Ä¢ Daily use: GPT-3.5-turbo ($0.002)")  
    print("‚Ä¢ Important bios: Claude Sonnet 4.5 ($0.013)")
    print("‚Ä¢ Speed critical: Gemini 2.5 Flash ($0.003)")
    print("‚Ä¢ Creative content: Claude-3-sonnet ($0.004)")
    print()
    
    print("üÜï What's New:")
    print("‚Ä¢ Claude Sonnet 4.5: 1M context, best reasoning")
    print("‚Ä¢ DeepSeek V3.2: 163K context, amazing value")
    print("‚Ä¢ Gemini 2.5 Flash: 1M context, 0.4s speed")
    print()
    
    print("üìä Performance Comparison:")
    print("‚Ä¢ Fastest: Gemini 2.5 Flash (0.4s latency)")
    print("‚Ä¢ Best Value: DeepSeek V3.2 (advanced + cheap)")
    print("‚Ä¢ Largest Context: Claude Sonnet 4.5 (1M tokens)")
    print("‚Ä¢ Most Popular: GPT-3.5-turbo (proven reliable)")
    print("‚Ä¢ Premium: Claude Sonnet 4.5 (latest + greatest)")
    print()
    
    print("üîí Benefits vs Local/Free AI:")
    print("‚Ä¢ Access to latest models (GPT-4, Claude-4.5)")
    print("‚Ä¢ Professional-grade output quality")
    print("‚Ä¢ Massive context windows (up to 1M tokens)")
    print("‚Ä¢ Sub-second response times")
    print("‚Ä¢ No hardware requirements")
    print("‚Ä¢ Always up-to-date models")
    print("‚Ä¢ Pay-per-use (no subscriptions)")
    print()

def main():
    """Run the complete OpenRouter demo."""
    try:
        demo_openrouter_setup()
        demo_openrouter_workflow()
        demo_openrouter_models()
        demo_enhancement_features()
        demo_cost_information()
        
        print("üéâ OpenRouter Integration Complete!")
        print("=" * 60)
        print()
        print("üöÄ Next Steps:")
        print("1. Get your OpenRouter API key: https://openrouter.ai/")
        print("2. Launch RepoReadme: python main_unified.py")
        print("3. Navigate to 'ü§ñ AI Bio' tab")
        print("4. Configure OpenRouter settings")
        print("5. Generate and enhance your LinkedIn bio!")
        print()
        print("üí° Your GitHub repositories will be analyzed by AI to create")
        print("   authentic, compelling LinkedIn bios that showcase your")
        print("   real skills and achievements!")
        print()
        print("üîó Useful Links:")
        print("‚Ä¢ OpenRouter Dashboard: https://openrouter.ai/activity")
        print("‚Ä¢ Model Pricing: https://openrouter.ai/docs#models")
        print("‚Ä¢ API Documentation: https://openrouter.ai/docs")
        
    except Exception as e:
        print(f"‚ùå Demo error: {e}")

if __name__ == "__main__":
    main()